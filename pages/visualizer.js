import { useEffect, useRef, useState } from 'react'
import { DateTime } from 'luxon';

import sorted from 'sorted-array-functions';

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import Button from 'react-bootstrap/Button'
import Form from 'react-bootstrap/Form'
import Overlay from 'react-bootstrap/Overlay'
import Tooltip from 'react-bootstrap/Tooltip'

import Datetime from 'react-datetime'

import ImageMarker from 'react-image-marker';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faLocationPin } from '@fortawesome/free-solid-svg-icons'

import axios from 'axios';

function DeathTip({ death, opacity, index }) {
  const target = useRef(null);

  return (<div>
  <div
    ref={target}
    style={{
      position: 'absolute',
      bottom: `calc(100% * (1 - ${death.pin.y}))`,
      left: `calc(100% * (${death.pin.x}))`
  }}

  >
    </div>
  <Overlay show={true} target={target.current} shouldUpdatePosition={true} key={Math.random()}>
  <Tooltip style={{ opacity: `calc(100% * ${opacity})` }}>
    {index}: {death.desc}
  </Tooltip>
  </Overlay>
    </div>);
}

function Time({ time }) {
  const formatted = time.toFormat('EEE, MMM dd, yyyy, hh:mm a');

  return <h3 style={{ fontFamily: 'Courier New', fontSize: '1.5rem' }}>{formatted}</h3>;
}

function Map({ name, deaths, count, time }) {

  const [ marker, setMarkers ] = useState([]);

  const src = '/maps/' + name + '.png';

  return (
    <div className={styles.mapdiv}>
      <img src={src} className={styles.map}/>
    {deaths.map(({ death, opacity, index}, i) => <DeathTip death={death} index={index} opacity={opacity}/>)}
      <div style={{ position: 'absolute', left: '2%', top: '9%', color: 'white' }}>
        <h3 style={{ fontFamily: 'Courier New', fontSize: '2rem' }}>Death: {count}</h3>
      </div>
      <div style={{ position: 'absolute', left: '2%', top: '5%', color: 'white' }}>
        <Time time={time} />
      </div>
    </div>
  );
}

const cmpTime = (a, b) => (Number(a > b) - Number(a < b));

function DeathForm({ deaths, minutes }) {
  const [ index, setIndex ] = useState(0);
  const curTime = minutes[index];
  const range = 60;
  const halflife = 40;
  const earliestTime = minutes[Math.max(0, index-range)];

  const lastDeath = ((idx) => (idx == -1) && deaths.length || idx)
    (sorted.gt(deaths, curTime, ((d, t) => cmpTime(d.time, t))));
  const firstDeath = ((idx) => (idx == -1) && deaths.length || idx)
    (sorted.gt(deaths, earliestTime, ((d, t) => cmpTime(d.time, t))));
  const display = deaths.slice(firstDeath, lastDeath);
  const withOpacity = display.map((d, i) => {
    const idx = sorted.eq(minutes, d.time.startOf("minute"), cmpTime);
    const opacity = Math.max(0, (range - (index-idx))/range);
    return { death: d, opacity, index: i + firstDeath + 1};
  });

  const map = lastDeath > 0 && deaths[lastDeath-1].map || 'overworld';

  const [ playing, setPlaying ] = useState(false);

  useEffect(() => {
    const interval = setTimeout(() => {
      if (playing) {
        if (index + 1 < minutes.length) {
          setIndex(index + 1);
        } else {
          setPlaying(false);
        }
      }
    }, 10);
    return () => clearTimeout(interval);
  });

  return (
    <div className={styles.mapdiv}>
      <Button variant="primary" onClick={() => setPlaying(!playing)}>{ (!playing && 'Play') || 'Stop' }</Button>
      <Form.Range id='index' value={index} onChange={(e) => setIndex(Number(e.target.value))} min={0} max={minutes.length-1}/>
      <Map name={map} deaths={withOpacity} count={lastDeath} time={curTime}/>
    </div>
  );
}

const minutesForDeaths = (deaths) => {
  const buffer = 60;
  return deaths.flatMap((death) => {
    const baseTime = death.time.startOf("minute");
    return Array(buffer * 2 + 1)
      .fill()
      .map((_, i) => baseTime.plus({ minutes: i - buffer }));
  }).sort().filter((e, i, a) => !i || (cmpTime(e, a[i-1]) != 0));
};

export default function Home() {
  const [ deaths, setDeaths ] = useState(null);

  useEffect(() => {
    axios.get('/data/deaths-stitched.json').then((response) => {
      console.log('Fetched deaths', response);
      const deaths = response.data.split('\n').slice(0,-1).map(JSON.parse);
      deaths.map((death) => {
        death.time = DateTime.fromFormat(death.time, "yyyy-MM-dd hh:mm:ss a", { zone: 'America/New_York' });
      });

      setDeaths(deaths);
    }).catch((error) => {
      console.error('Failed to fetch data', error);
    });
  }, []);

  const minutes = deaths && minutesForDeaths(deaths);
  if (deaths && minutes) {
    console.log('Deaths and minutes', deaths.length, minutes.length);
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Death Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

    {deaths && <DeathForm deaths={deaths} minutes={minutes}/>}
    </div>
  )
}
